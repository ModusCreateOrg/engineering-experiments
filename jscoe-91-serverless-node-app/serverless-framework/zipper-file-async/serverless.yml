service: zipper-file-async
frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs14.x
  stage: ${opt:stage, "dev"}
  environment:
    ${file(./config/${opt:stage, 'dev'}.yaml)}
  apiGateway:
    binaryMediaTypes:
      - 'multipart/form-data'

functions:
  upload:
    role: UploadRole
    handler: src/index.uploader
    events:
      - http: 
          path: save
          method: post
  zipper:
    role: UploadRole
    handler: src/index.zipper
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - ZipFileQueue
              - Arn
          batchSize: 1
          maximumBatchingWindow: 60
  listZipped:
    role: UploadRole
    handler: src/index.listZipped
    events:
      - http:
          path: list
          method: get
  websocketConnect:
    role: UploadRole
    handler: src/index.onConnect
    events:
      - websocket:
          route: $connect
  websocketDisconnect:
    role: UploadRole
    handler: src/index.onDisconnect
    events:
      - websocket:
          route: $disconnect
  websocketOnMessage:
    role: UploadRole
    handler: src/index.onMessage
    events:
      - websocket:
          route: onMessage             

plugins:
  - serverless-s3-local
  - serverless-offline

custom:
  region: us-east-1
  stage: "${opt:stage, self:provider.stage}"
  dev:
    WS_URL: "http://localhost:3000/"
  test:
    WS_URL:
        "Fn::Join":
            - ""
            -
              - "https://"
              - Ref: WebsocketsApi
              - .execute-api.${self:custom.region}.amazonaws.com/${self:custom.stage}
  FILES_ZIPPED_TABLE: ZIPPED
  s3:
    host: localhost
    directory: /tmp

resources:
  Resources:
    UploadRole:
      Type: AWS::IAM::Role
      Properties: 
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: myPolicyName
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - "Fn::Join":
                        - ":"
                        - - "arn:aws:logs"
                          - Ref: "AWS::Region"
                          - Ref: "AWS::AccountId"
                          - "log-group:/aws/lambda/*:*:*"
                - Effect: Allow
                  Action:
                    - s3:*
                  Resource:
                    Fn::Join:
                      - ""
                      - - "arn:aws:s3:::modusland"
                        - "/*"
                - Effect: Allow
                  Action:
                    - sqs:*
                  Resource:
                    Fn::GetAtt:
                      - ZipFileQueue
                      - Arn
                - Effect: Allow
                  Action:
                    - dynamodb:Query
                    - dynamodb:Scan
                    - dynamodb:GetItem
                    - dynamodb:PutItem
                    - dynamodb:UpdateItem
                    - dynamodb:DeleteItem
                  Resource:
                    - Fn::GetAtt: [FilesTable, Arn]
                    - Fn::GetAtt: [ConnectionsWebsocketTable, Arn]
                - Effect: Allow
                  Action:
                    - execute-api:Invoke
                    - execute-api:ManageConnections
                  Resource:
                    - Fn::Join:
                        - ":"
                        - - "arn:aws:execute-api"
                          - Ref: "AWS::Region"
                          - Ref: "AWS::AccountId"
                          - Fn::Join:
                              - ""
                              - - Ref: WebsocketsApi
                                - "/*"
    NewResource:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: modusland
        AccessControl: PublicRead
    ZipFileQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: "ZipFile"
    FilesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.FILES_ZIPPED_TABLE}
    ConnectionsWebsocketTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: connectionId
            AttributeType: S
        KeySchema:
          - AttributeName: connectionId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.CONNECTIONS_WEBSOCKET_TABLE}
